/*Copyright (c) "Kinto Soft Ltd"

Subversion ALM is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.*/


CREATE TABLE IF NOT EXISTS REPOSITORIES
	(
		ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
		URL VARCHAR(1024) NOT NULL,
		NAME VARCHAR(255)
		);

CREATE UNIQUE INDEX IF NOT EXISTS REPOSITORIES_URL_INDEX ON REPOSITORIES(URL);
CREATE UNIQUE INDEX IF NOT EXISTS REPOSITORIES_NAME_INDEX ON REPOSITORIES(NAME);

CREATE TABLE IF NOT EXISTS REPOSITORIES_CONFIGURATION
	(
		REPOID BIGINT NOT NULL,
		KEY VARCHAR(255) NOT NULL,
		VALUE VARCHAR(65535),
		
		PRIMARY KEY(REPOID, KEY),

    /* AO DONE */
		CONSTRAINT REPOSITORIES_CONFIGURATION_REPOSITORY_FK
		FOREIGN KEY(REPOID) 
		REFERENCES REPOSITORIES(ID)
	);
CREATE INDEX IF NOT EXISTS REPOSITORIES_CONFIGURATION_KEY ON REPOSITORIES_CONFIGURATION(KEY);
CREATE INDEX IF NOT EXISTS REPOSITORIES_CONFIGURATION_VALUE ON REPOSITORIES_CONFIGURATION(VALUE);
CREATE INDEX IF NOT EXISTS REPOSITORIES_CONFIGURATION_KEY_REPOID ON REPOSITORIES_CONFIGURATION(KEY, REPOID);
CREATE INDEX IF NOT EXISTS REPOSITORIES_CONFIGURATION_VALUE_REPOID ON REPOSITORIES_CONFIGURATION(VALUE, REPOID);


CREATE TABLE IF NOT EXISTS REVISIONS
	(
	REPOID BIGINT NOT NULL,
	REVISION BIGINT NOT NULL,
	AUTHOR VARCHAR(255),
	TIMESTAMP TIMESTAMP,
	DAY DATE,
	
	PRIMARY KEY(REPOID, REVISION),

	/* AO DONE */
	CONSTRAINT REVISION_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)
	);
CREATE INDEX IF NOT EXISTS REPOID_REVISIONS_INDEX ON REVISIONS(REPOID);

CREATE INDEX IF NOT EXISTS AUTHOR_REVISIONS_INDEX ON REVISIONS(AUTHOR);
CREATE INDEX IF NOT EXISTS TIMESTAMP_REVISIONS_INDEX ON REVISIONS(TIMESTAMP);
CREATE INDEX IF NOT EXISTS DAY_REVISIONS_INDEX ON REVISIONS(DAY);

CREATE INDEX IF NOT EXISTS REPOID_AUTHOR_REVISIONS_INDEX ON REVISIONS(REPOID, AUTHOR);
CREATE INDEX IF NOT EXISTS REPOID_TIMESTAMP_REVISIONS_INDEX ON REVISIONS(REPOID, TIMESTAMP);
CREATE INDEX IF NOT EXISTS REPOID_DAY_REVISIONS_INDEX ON REVISIONS(REPOID, DAY);


CREATE TABLE IF NOT EXISTS ITEMS
	(
	ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	REPOID BIGINT NOT NULL,
	NAME VARCHAR(255) NOT NULL,
	PATH VARCHAR(32672) NOT NULL,

	/* AO DONE */
	CONSTRAINT ITEMS_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)

	);
CREATE UNIQUE INDEX IF NOT EXISTS ITEM_INDEX ON ITEMS(REPOID, NAME, PATH);
CREATE INDEX IF NOT EXISTS REPOID_ITEMS_INDEX ON ITEMS(REPOID);
CREATE INDEX IF NOT EXISTS PATH_ITEMS_INDEX ON ITEMS(PATH);
CREATE INDEX IF NOT EXISTS NAME_ITEMS_INDEX ON ITEMS(NAME);
CREATE INDEX IF NOT EXISTS REPOID_PATH_ITEMS_INDEX ON ITEMS(REPOID, PATH);
CREATE INDEX IF NOT EXISTS REPOID_NAME_ITEMS_INDEX ON ITEMS(REPOID, NAME);
CREATE INDEX IF NOT EXISTS PATH_NAME_ITEMS_INDEX ON ITEMS(PATH, NAME);

CREATE TABLE IF NOT EXISTS ACTIONS
	(
	REPOID BIGINT NOT NULL,
	REVISION BIGINT NOT NULL,
	ACTION CHAR(1) NOT NULL,
	ITEMID BIGINT,
	
	PRIMARY KEY(REPOID,REVISION,ACTION,ITEMID),
	
	CONSTRAINT ACTION_REVISION_FK
	FOREIGN KEY(REPOID, REVISION) 
	REFERENCES REVISIONS(REPOID, REVISION),

	/* AO DONE */
	CONSTRAINT ACTION_ITEM_FK
	FOREIGN KEY(ITEMID) 
	REFERENCES ITEMS(ID),

	/* AO DONE */
	CONSTRAINT ACTIONS_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)

	);
CREATE INDEX IF NOT EXISTS REPOID_ACTIONS_INDEX ON ACTIONS(REPOID);
CREATE INDEX IF NOT EXISTS ITEMID_ACTIONS_INDEX ON ACTIONS(ITEMID);
CREATE INDEX IF NOT EXISTS REPOID_ITEMID_ACTIONS_INDEX ON ACTIONS(REPOID,ITEMID);
CREATE INDEX IF NOT EXISTS REPOID_REVISION_ACTIONS_INDEX ON ACTIONS(REPOID, REVISION);
CREATE INDEX IF NOT EXISTS REPOID_REVISION_ITEM_ACTIONS_INDEX ON ACTIONS(REPOID, REVISION, ITEMID);
CREATE INDEX IF NOT EXISTS REPOID_REVISION_ACTION_ACTIONS_INDEX ON ACTIONS(REPOID, REVISION, ACTION);

CREATE TABLE IF NOT EXISTS COPIES
	(
	REPOID BIGINT NOT NULL,
	REVISION BIGINT NOT NULL,
	ITEMID BIGINT NOT NULL,
	FROM_REVISION BIGINT NOT NULL,
	FROM_ITEMID BIGINT NOT NULL,
	
	CONSTRAINT COPY_REVISION_FK
	FOREIGN KEY(REPOID, REVISION) 
	REFERENCES REVISIONS(REPOID, REVISION),
	
	CONSTRAINT COPY_FROM_REVISION_FK
	FOREIGN KEY(REPOID, FROM_REVISION) 
	REFERENCES REVISIONS(REPOID, REVISION),


	/* AO DONE */
	CONSTRAINT COPY_ITEM_FK
	FOREIGN KEY(ITEMID) 
	REFERENCES ITEMS(ID),

	/* AO DONE */
	CONSTRAINT COPY_FROM_ITEM_FK
	FOREIGN KEY(FROM_ITEMID) 
	REFERENCES ITEMS(ID),

	/* AO DONE */
	CONSTRAINT COPIES_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)

	);
CREATE INDEX IF NOT EXISTS REPOID_COPIES_INDEX ON COPIES(REPOID);
CREATE INDEX IF NOT EXISTS COPIES_INDEX ON COPIES(REPOID,REVISION,ITEMID);
CREATE INDEX IF NOT EXISTS COPIES_FROM_INDEX ON COPIES(REPOID,FROM_REVISION,FROM_ITEMID);
	
	
CREATE TABLE IF NOT EXISTS COMMENTS
	(
	REPOID BIGINT NOT NULL,
	REVISION BIGINT NOT NULL,
	COMMENT VARCHAR(65535) NOT NULL,
	
	PRIMARY KEY(REPOID,REVISION),

	/* AO DONE - We can get revisions from repository and lookup by revision ID above */
	CONSTRAINT COMMENT_REVISION_FK
	FOREIGN KEY(REPOID, REVISION) 
	REFERENCES REVISIONS(REPOID, REVISION),

	/* AO DONE */
	CONSTRAINT COMMENTS_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)

	);
CREATE INDEX IF NOT EXISTS REPOID_COMMENTS_INDEX ON COMMENTS(REPOID);

CREATE TABLE IF NOT EXISTS KEYS
	(
	REPOID BIGINT NOT NULL,
	REVISION BIGINT NOT NULL,
	PROJECT VARCHAR(255) NOT NULL,
	ISSUE BIGINT NOT NULL,
	
	PRIMARY KEY(REPOID,REVISION,PROJECT,ISSUE),

	/* AO DONE - We can get revisions from repository and lookup by revision ID above */
	CONSTRAINT KEY_REVISION_FK
	FOREIGN KEY(REPOID, REVISION) 
	REFERENCES REVISIONS(REPOID, REVISION),

  /* AO DONE */
	CONSTRAINT KEYS_REPOSITORY_FK
	FOREIGN KEY(REPOID) 
	REFERENCES REPOSITORIES(ID)
   );
   
CREATE INDEX IF NOT EXISTS REPOID_KEYS_INDEX ON KEYS(REPOID);
CREATE INDEX IF NOT EXISTS PROJECT_KEYS_INDEX ON KEYS(PROJECT);
CREATE INDEX IF NOT EXISTS PROJECT_ISSUE_KEYS_INDEX ON KEYS(PROJECT,ISSUE);
CREATE INDEX IF NOT EXISTS REPOID_REVISION_KEYS_INDEX ON KEYS(REPOID,REVISION);


CREATE ALIAS IF NOT EXISTS HAS_PRIVILEGES_VIEW_VERSION_CONTROL FOR "com.kintosoft.svnwebclient.db.DatabaseFunctions.hasVersionControlPermisions";

CREATE ALIAS IF NOT EXISTS HAS_PRIVILEGES_BROWSE FOR "com.kintosoft.svnwebclient.db.DatabaseFunctions.hasVersionControlPermisions";

CREATE ALIAS IF NOT EXISTS ISSUEKEY DETERMINISTIC FOR "com.kintosoft.svnwebclient.db.DatabaseFunctions.issueKey";

CREATE ALIAS IF NOT EXISTS IS_ISSUE FOR "com.kintosoft.svnwebclient.db.DatabaseFunctions.isIssue";

CREATE ALIAS IF NOT EXISTS JIRA_FILTER FOR "com.kintosoft.svnwebclient.db.DatabaseFunctions.getJIRAFilterIssues";

CREATE TABLE IF NOT EXISTS APPLICATION_CONFIGURATION
	(
		KEY VARCHAR(255) NOT NULL,
		VALUE VARCHAR(65535),
		
		PRIMARY KEY(KEY)
	);
	